{"version":3,"file":"generatebase.min.js","sources":["../src/generatebase.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI base generate class.\n *\n * @module      tiny_aiplacement/generatebase\n * @copyright   2024 Matt Porritt <matt.porritt@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {loadingMessages} from 'tiny_aiplacement/loading';\nimport {getString} from 'core/str';\nimport Templates from 'core/templates';\nimport {\n    getContextId,\n    getUserId\n} from 'tiny_aiplacement/options';\nimport {getPolicyStatus, setPolicyStatus} from 'core/ai/policy';\n\nexport default class GenerateBase {\n    /**\n     * Class constructor.\n     *\n     * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n     */\n    constructor(editor) {\n        this.editor = editor;\n        this.userid = getUserId(editor);\n        this.contextid = getContextId(editor);\n        this.responseObj = null;\n    }\n\n    /**\n     * Display the modal when the AI button is clicked.\n     *\n     */\n    displayContentModal = async() => {\n        const templateContext = this.getTemplateContext();\n        const modalObject = await this.setupModal();\n        await modalObject.show(); // Will briefly show the modal with the loading spinner, while the content is being fetched.\n\n        // Check if we need to display and handle the AI acceptance policy.\n        const checkPolicy = await getPolicyStatus(this.userid, this.contextid);\n        if (!checkPolicy.status) {\n            await this.setupPolicyModal(modalObject, templateContext);\n        } else {\n            await this.setupContentModal(modalObject, templateContext);\n        }\n    };\n\n    /**\n     * Add event listeners for the text modal.\n     *\n     * @param {object} modalObject The image modal object.\n     * @returns {void}\n     */\n    addContentEventListeners = async(modalObject) => {\n        const modalRoot = await modalObject.getRoot();\n        const root = modalRoot[0];\n\n        root.addEventListener('click', (e) => {\n            this.handleContentModalClick(e, modalObject, root);\n        });\n\n        this.setupPromptArea(root);\n        this.hideLoadingSpinner(root);\n    };\n\n    /**\n     * Set up the policy modal with loading spinner and policy content.\n     *\n     * @param {object} modalObject The modal object.\n     * @param {object} templateContext The template context.\n     * @returns {Promise<void>} A promise that resolves when the modal is set up.\n     */\n    setupPolicyModal = async(modalObject, templateContext) => {\n        const loadingContext = {...templateContext, ishidden: true};\n        const [loadingBody, policyBody, policyFooter] = await Promise.all([\n            Templates.render('tiny_aiplacement/loading', loadingContext),\n            Templates.render('tiny_aiplacement/modalbodypolicy', templateContext),\n            Templates.render('tiny_aiplacement/modalfooterpolicy', templateContext)\n        ]);\n\n        modalObject.setBody(loadingBody + policyBody);\n        modalObject.setFooter(policyFooter);\n        this.addPolicyEventListeners(modalObject);\n    };\n\n    /**\n     * Hide the loading spinner.\n     *\n     * @param {Object} root The root element of the modal.\n     */\n    hideLoadingSpinner = (root) => {\n        const loadingSpinnerDiv = root.querySelector(`#${this.editor.id}_tiny_aiplacement_spinner`);\n        loadingSpinnerDiv.classList.add('hidden');\n        loadingSpinnerDiv.classList.remove('tiny-aiplacement-loading-spinner-container');\n    };\n\n    /**\n     * Add event listeners for the policy modal.\n     *\n     * @param {object} modalObject The image modal object.\n     * @returns {void}\n     */\n    addPolicyEventListeners = async(modalObject) => {\n        const modalRoot = await modalObject.getRoot();\n        const root = modalRoot[0];\n\n        root.addEventListener('click', (e) => {\n            this.handlePolicyModalClick(e, modalObject);\n        });\n    };\n\n\n    /**\n     * Handle click events within the policy modal.\n     *\n     * @param {Event} e - The click event object.\n     * @param {object} modalObject - The image modal object.\n     */\n    handlePolicyModalClick = (e, modalObject) => {\n        const actions = {\n            accept: () => this.handlePolicyAccept(modalObject, e.target),\n            cancel: () => modalObject.destroy()\n        };\n\n        const actionKey = Object.keys(actions).find(key => e.target.closest(`[data-action=\"${key}\"]`));\n        if (actionKey) {\n            e.preventDefault();\n            actions[actionKey]();\n        }\n    };\n\n    /**\n     * Handle the policy accept action.\n     *\n     * @param {TextModal} modalObject The image modal object.\n     * @param {Object} acceptBtn The submit button element.\n     * @returns {void}\n     */\n    handlePolicyAccept = async(modalObject, acceptBtn) => {\n        await setPolicyStatus(this.userid, this.contextid);\n\n        const modalRoot = await modalObject.getRoot();\n        const root = modalRoot[0];\n\n        await this.displayLoading(root, acceptBtn, 'tiny-aiplacement-loading-spinner-container');\n\n        const templateContext = this.getTemplateContext();\n        await this.setupContentModal(modalObject, templateContext);\n        await this.hideLoading(root, acceptBtn);\n    };\n\n    /**\n     * Get the context to use in the modal template.\n     *\n     * @returns {Object}\n     */\n    getTemplateContext = () => {\n        return {elementid: this.editor.id};\n    };\n\n    /**\n     * Display the loading state in the modal.\n     *\n     * @param {HTMLElement} root - The root element of the modal.\n     * @param {HTMLElement} submitBtn - The submit button element.\n     * @param {String|null} removeClass - The class to be removed from the loading spinner div, if any.\n     */\n    displayLoading = async(root, submitBtn, removeClass = null) => {\n        const loadingSpinnerDiv = root.querySelector(`#${this.editor.id}_tiny_aiplacement_spinner`);\n        const overlayDiv = root.querySelector(`#${this.editor.id}_tiny_aiplacement_overlay`);\n        const blurDiv = root.querySelector(`#${this.editor.id}_tiny_aiplacement_blur`);\n        const loadingTextDiv = root.querySelector(`#${this.editor.id}_tiny_aiplacement_loading_text`);\n\n        loadingMessages(loadingTextDiv);\n\n        if (removeClass) {\n            loadingSpinnerDiv.classList.remove(removeClass);\n        }\n\n        loadingSpinnerDiv.classList.remove('hidden');\n        overlayDiv.classList.remove('hidden');\n        blurDiv.classList.add('tiny-aiplacement-blur');\n        submitBtn.innerHTML = await getString('generating', 'tiny_aiplacement');\n        submitBtn.disabled = true;\n    };\n\n    /**\n     * Hide the loading action in the modal.\n     *\n     * @param {Object} root The root element of the modal.\n     * @param {Object} submitBtn The submit button element.\n     */\n    hideLoading = async(root, submitBtn) => {\n        const loadingSpinnerDiv = root.querySelector(`#${this.editor.id}_tiny_aiplacement_spinner`);\n        const overlayDiv = root.querySelector(`#${this.editor.id}_tiny_aiplacement_overlay`);\n        const blurDiv = root.querySelector(`#${this.editor.id}_tiny_aiplacement_blur`);\n\n        loadingSpinnerDiv.classList.add('hidden');\n        overlayDiv.classList.add('hidden');\n        blurDiv.classList.remove('tiny-aiplacement-blur');\n        submitBtn.innerHTML = await getString('regenerate', 'tiny_aiplacement');\n        submitBtn.disabled = false;\n    };\n\n}\n"],"names":["constructor","editor","async","templateContext","this","getTemplateContext","modalObject","setupModal","show","userid","contextid","status","setupContentModal","setupPolicyModal","root","getRoot","addEventListener","e","handleContentModalClick","setupPromptArea","hideLoadingSpinner","loadingContext","ishidden","loadingBody","policyBody","policyFooter","Promise","all","Templates","render","setBody","setFooter","addPolicyEventListeners","loadingSpinnerDiv","querySelector","id","classList","add","remove","handlePolicyModalClick","actions","accept","handlePolicyAccept","target","cancel","destroy","actionKey","Object","keys","find","key","closest","preventDefault","acceptBtn","displayLoading","hideLoading","elementid","submitBtn","removeClass","_this","overlayDiv","blurDiv","loadingTextDiv","innerHTML","disabled","responseObj"],"mappings":"4iBAsCIA,YAAYC,mEAWUC,gBACZC,gBAAkBC,KAAKC,qBACvBC,kBAAoBF,KAAKG,mBACzBD,YAAYE,cAGQ,2BAAgBJ,KAAKK,OAAQL,KAAKM,YAC3CC,aAGPP,KAAKQ,kBAAkBN,YAAaH,uBAFpCC,KAAKS,iBAAiBP,YAAaH,qEAYtBD,MAAAA,oBAEjBY,YADkBR,YAAYS,WACb,GAEvBD,KAAKE,iBAAiB,SAAUC,SACvBC,wBAAwBD,EAAGX,YAAaQ,cAG5CK,gBAAgBL,WAChBM,mBAAmBN,kDAUTZ,MAAMI,YAAaH,yBAC5BkB,eAAiB,IAAIlB,gBAAiBmB,UAAU,IAC/CC,YAAaC,WAAYC,oBAAsBC,QAAQC,IAAI,CAC9DC,mBAAUC,OAAO,2BAA4BR,gBAC7CO,mBAAUC,OAAO,mCAAoC1B,iBACrDyB,mBAAUC,OAAO,qCAAsC1B,mBAG3DG,YAAYwB,QAAQP,YAAcC,YAClClB,YAAYyB,UAAUN,mBACjBO,wBAAwB1B,2DAQXQ,aACZmB,kBAAoBnB,KAAKoB,yBAAkB9B,KAAKH,OAAOkC,iCAC7DF,kBAAkBG,UAAUC,IAAI,UAChCJ,kBAAkBG,UAAUE,OAAO,iGASbpC,MAAAA,qBACEI,YAAYS,WACb,GAElBC,iBAAiB,SAAUC,SACvBsB,uBAAuBtB,EAAGX,kEAWd,CAACW,EAAGX,qBACnBkC,QAAU,CACZC,OAAQ,IAAMrC,KAAKsC,mBAAmBpC,YAAaW,EAAE0B,QACrDC,OAAQ,IAAMtC,YAAYuC,WAGxBC,UAAYC,OAAOC,KAAKR,SAASS,MAAKC,KAAOjC,EAAE0B,OAAOQ,gCAAyBD,aACjFJ,YACA7B,EAAEmC,iBACFZ,QAAQM,4DAWK5C,MAAMI,YAAa+C,mBAC9B,2BAAgBjD,KAAKK,OAAQL,KAAKM,iBAGlCI,YADkBR,YAAYS,WACb,SAEjBX,KAAKkD,eAAexC,KAAMuC,UAAW,oDAErClD,gBAAkBC,KAAKC,2BACvBD,KAAKQ,kBAAkBN,YAAaH,uBACpCC,KAAKmD,YAAYzC,KAAMuC,yDAQZ,KACV,CAACG,UAAWpD,KAAKH,OAAOkC,8CAUlBjC,eAAMY,KAAM2C,eAAWC,mEAAc,WAC5CzB,kBAAoBnB,KAAKoB,yBAAkByB,MAAK1D,OAAOkC,iCACvDyB,WAAa9C,KAAKoB,yBAAkByB,MAAK1D,OAAOkC,iCAChD0B,QAAU/C,KAAKoB,yBAAkByB,MAAK1D,OAAOkC,8BAC7C2B,eAAiBhD,KAAKoB,yBAAkByB,MAAK1D,OAAOkC,mEAE1C2B,gBAEZJ,aACAzB,kBAAkBG,UAAUE,OAAOoB,aAGvCzB,kBAAkBG,UAAUE,OAAO,UACnCsB,WAAWxB,UAAUE,OAAO,UAC5BuB,QAAQzB,UAAUC,IAAI,yBACtBoB,UAAUM,gBAAkB,kBAAU,aAAc,oBACpDN,UAAUO,UAAW,yCASX9D,MAAMY,KAAM2C,mBAChBxB,kBAAoBnB,KAAKoB,yBAAkB9B,KAAKH,OAAOkC,iCACvDyB,WAAa9C,KAAKoB,yBAAkB9B,KAAKH,OAAOkC,iCAChD0B,QAAU/C,KAAKoB,yBAAkB9B,KAAKH,OAAOkC,8BAEnDF,kBAAkBG,UAAUC,IAAI,UAChCuB,WAAWxB,UAAUC,IAAI,UACzBwB,QAAQzB,UAAUE,OAAO,yBACzBmB,UAAUM,gBAAkB,kBAAU,aAAc,oBACpDN,UAAUO,UAAW,UAlLhB/D,OAASA,YACTQ,QAAS,sBAAUR,aACnBS,WAAY,yBAAaT,aACzBgE,YAAc"}