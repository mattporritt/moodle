{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_aiplacement plugin.\n *\n * @module      tiny_aiplacement/commands\n * @copyright   2024 Matt Porritt <matt.porritt@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {get_string as getString} from 'core/str';\nimport {\n    component,\n    placement,\n    contextMenuName,\n    generateImageName,\n    generateTextName,\n    contextMenuIcon,\n    generateImageIcon,\n    generateTextIcon\n} from './common';\nimport GenerateImage from './generateimage';\nimport GenerateText from './generatetext';\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        contextMenuIconText,\n        generateImageIconText,\n        generateTextIconText,\n        contextMenuIconImage,\n        generateImageIconImage,\n        generateTextIconImage,\n    ] = await Promise.all([\n        getString('generatecontent', placement),\n        getString('generateimage', placement),\n        getString('generatetext', placement),\n        getButtonImage(contextMenuIcon, component),\n        getButtonImage(generateImageIcon, component),\n        getButtonImage(generateTextIcon, component),\n    ]);\n\n    return (editor) => {\n        // Register the icon SVG files as an icon suitable for use in TinyMCE toolbars and buttons.\n        editor.ui.registry.addIcon(contextMenuIcon, contextMenuIconImage.html);\n        editor.ui.registry.addIcon(generateImageIcon, generateImageIconImage.html);\n        editor.ui.registry.addIcon(generateTextIcon, generateTextIconImage.html);\n\n        // Add the context menu button.\n        // This context menu displays the available AI placement options.\n        editor.ui.registry.addMenuButton(contextMenuName, {\n            icon: contextMenuIcon,\n            tooltip: contextMenuIconText,\n            fetch: callback => callback(`${generateImageName} ${generateTextName}`),\n        });\n\n        // Add the menu items for the context menu.\n        editor.ui.registry.addMenuItem(generateImageName, {\n            icon: generateImageIcon,\n            text: generateImageIconText,\n            onAction: () => {\n                const generateImage = new GenerateImage(editor);\n                generateImage.displayContentModal(editor);\n            },\n        });\n\n        editor.ui.registry.addMenuItem(generateTextName, {\n            icon: generateTextIcon,\n            text: generateTextIconText,\n            onAction: () => {\n                const generateText = new GenerateText(editor);\n                generateText.displayContentModal(editor);\n            },\n        });\n\n    };\n};\n"],"names":["async","contextMenuIconText","generateImageIconText","generateTextIconText","contextMenuIconImage","generateImageIconImage","generateTextIconImage","Promise","all","placement","contextMenuIcon","component","generateImageIcon","generateTextIcon","editor","ui","registry","addIcon","html","addMenuButton","contextMenuName","icon","tooltip","fetch","callback","generateImageName","generateTextName","addMenuItem","text","onAction","GenerateImage","displayContentModal","GenerateText"],"mappings":";;;;;;;kNA8CwBA,gBAEhBC,oBACAC,sBACAC,qBACAC,qBACAC,uBACAC,6BACMC,QAAQC,IAAI,EAClB,mBAAU,kBAAmBC,oBAC7B,mBAAU,gBAAiBA,oBAC3B,mBAAU,eAAgBA,oBAC1B,yBAAeC,wBAAiBC,oBAChC,yBAAeC,0BAAmBD,oBAClC,yBAAeE,yBAAkBF,4BAG7BG,SAEJA,OAAOC,GAAGC,SAASC,QAAQP,wBAAiBN,qBAAqBc,MACjEJ,OAAOC,GAAGC,SAASC,QAAQL,0BAAmBP,uBAAuBa,MACrEJ,OAAOC,GAAGC,SAASC,QAAQJ,yBAAkBP,sBAAsBY,MAInEJ,OAAOC,GAAGC,SAASG,cAAcC,wBAAiB,CAC9CC,KAAMX,wBACNY,QAASrB,oBACTsB,MAAOC,UAAYA,mBAAYC,sCAAqBC,6BAIxDZ,OAAOC,GAAGC,SAASW,YAAYF,0BAAmB,CAC9CJ,KAAMT,0BACNgB,KAAM1B,sBACN2B,SAAU,KACgB,IAAIC,uBAAchB,QAC1BiB,oBAAoBjB,WAI1CA,OAAOC,GAAGC,SAASW,YAAYD,yBAAkB,CAC7CL,KAAMR,yBACNe,KAAMzB,qBACN0B,SAAU,KACe,IAAIG,sBAAalB,QACzBiB,oBAAoBjB"}