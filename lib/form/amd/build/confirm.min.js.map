{"version":3,"sources":["../src/confirm.js"],"names":["modalObj","submitId","spinner","LoadingIcon","getIcon","createModal","Str","get_string","then","title","ModalFactory","create","type","types","SAVE_CANCEL","body","large","done","modal","root","getRoot","setButtonText","on","ModalEvents","save","form","document","getElementById","submit","catch","Notification","exception","Error","updateModal","confirmNotices","setBody","show","Templates","renderForPromise","html","formSubmit","event","submitter","name","preventDefault","target","confirmElements","querySelectorAll","forEach","element","checked","dataset","confirm","value","noticeData","labels","textContent","trim","confirmdesc","description","push","length","init","formId","addEventListener"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Form confirmation module.\n *\n * @module     core_form/confirm\n * @copyright  2022 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Str from 'core/str';\nimport Templates from 'core/templates';\nimport LoadingIcon from 'core/loadingicon';\n\n/**\n * Module level variables.\n */\nlet modalObj;\nlet submitId;\n\nconst spinner = LoadingIcon.getIcon();\n\n/**\n * Creates the confirmation modal.\n *\n * @private\n */\nconst createModal = () => {\n// Get the Title String.\n    Str.get_string('confirm', 'core_form').then((title) => {\n        // Create the Modal.\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: title,\n            body: spinner,\n            large: true\n        }).done(function(modal) {\n            modalObj = modal;\n            const root = modalObj.getRoot();\n\n            modal.setButtonText('save', Str.get_string('yes'));\n            modal.setButtonText('cancel', Str.get_string('no'));\n\n            // Submit form on the save event of the modal.\n            root.on(ModalEvents.save, () => {\n                const form = document.getElementById(submitId);\n                form.submit();\n            });\n        });\n        return;\n    }).catch(() => {\n        Notification.exception(new Error('Failed to load string: loading'));\n    });\n};\n\n/**\n * Updates the modal with content.\n *\n * @param {Array} confirmNotices The notice information.\n * @private\n */\nfunction updateModal(confirmNotices) {\n    const context = {'notices': confirmNotices};\n\n    modalObj.setBody(spinner);\n    modalObj.show();\n\n    // Load the modal body with the relevant confirmation messages.\n    Templates.renderForPromise('core_form/modal_confirm', context).then(({html}) => {\n        modalObj.setBody(html);\n        return;\n    }).catch(() => {\n        Notification.exception(new Error('Failed to load template: core_form/modal_confirm'));\n    });\n}\n\n/**\n * Handle the form submission event and gather the confirmation conditions.\n *\n * @param {event} event The form submission event.\n */\nconst formSubmit = (event) => {\n    if (event.submitter.name === 'cancel') {\n        return;\n    }\n    event.preventDefault();\n    const form = event.target;\n    let confirmNotices = [];\n\n    // Get all form elements that have data confirm attributes.\n    const confirmElements = form.querySelectorAll('[data-confirm]');\n\n    // Build array of confirmation item labels and descriptions.\n    confirmElements.forEach((element) => {\n        if ((element.type === 'checkbox' && element.checked != Boolean(Number(element.dataset.confirm)))\n            || ((typeof element.value !== 'undefined') && element.value != element.dataset.confirm)) {\n\n            let noticeData = {'label': element.labels[0].textContent.trim()};\n            if (element.dataset.confirmdesc !== undefined) {\n                noticeData.description = element.dataset.confirmdesc;\n            }\n\n            confirmNotices.push(noticeData);\n        }\n    });\n\n    if (confirmNotices.length) {\n        // Call the modal to display the fields with confirmation messages.\n        updateModal(confirmNotices);\n        return;\n    }\n\n    // No confirmation messages apply, just submit the form.\n    document.getElementById(submitId).submit();\n};\n\n/**\n * Initialise method for confirmation display.\n *\n * @param {String} formId The id of the form the confirmation applies to.\n */\nexport const init = (formId) => {\n    submitId = formId;\n\n    // Set up the modal to be used later.\n    createModal();\n\n    // Add submit event listener to the form.\n    const form = document.getElementById(formId);\n    form.addEventListener('submit', formSubmit);\n};\n"],"file":"confirm.min.js"}