{"version":3,"file":"notification_popover_push.min.js","sources":["../src/notification_popover_push.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const setupWorker = async() => {\n    window.console.log('push lib loaded');\n    let registration;\n\n    try {\n        // Register the service worker.\n        // As the service worker listens for push notifications,\n        // the user will be prompted to allow push notifications.\n        const workeruri = '/message/output/popup/amd/build/notification_service_worker.min.js';\n        registration = await navigator.serviceWorker.register(workeruri);\n    } catch (error) {\n        if (error.name === 'NotAllowedError') {\n            // Handle the specific case where permission was denied.\n            window.console.error('Permission for Push API has been denied');\n            // TODO: Show a message to the user to explain why they need to enable Push.\n            // Maybe save this as a preference so we don't show it again?\n        } else {\n            // We have a non permission error, re-throw.\n            throw error;\n        }\n    }\n    return registration;\n};\n\nexport const init = async(vapidpublickey) => {\n    // Set up the service worker.\n    window.console.log(vapidpublickey);\n    const registration = await setupWorker();\n\n    // Attempt to retrieve existing push subscription.\n    let subscription = await registration.pushManager.getSubscription();\n\n    // If no existing subscription, subscribe\n    if (!subscription) {\n        await registration.pushManager.subscribe({userVisibleOnly: true});\n    }\n};\n"],"names":["setupWorker","async","registration","window","console","log","workeruri","navigator","serviceWorker","register","error","name","vapidpublickey","pushManager","getSubscription","subscribe","userVisibleOnly"],"mappings":"yLAeaA,YAAcC,cAEnBC,aADJC,OAAOC,QAAQC,IAAI,6BAOTC,UAAY,qEAClBJ,mBAAqBK,UAAUC,cAAcC,SAASH,WACxD,MAAOI,UACc,oBAAfA,MAAMC,WAOAD,MALNP,OAAOC,QAAQM,MAAM,kDAQtBR,6DAGSD,MAAAA,iBAEhBE,OAAOC,QAAQC,IAAIO,sBACbV,mBAAqBF,oBAGFE,aAAaW,YAAYC,yBAIxCZ,aAAaW,YAAYE,UAAU,CAACC,iBAAiB"}