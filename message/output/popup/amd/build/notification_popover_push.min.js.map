{"version":3,"file":"notification_popover_push.min.js","sources":["../src/notification_popover_push.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport Ajax from 'core/ajax';\nimport ModalCancel from 'core/modal_cancel';\nimport ModalEvents from 'core/modal_events';\nimport {getStrings} from 'core/str';\n\n\n/**\n * Converts a JS ArrayBuffer to a Base64 encoded string.\n *\n * @param {ArrayBuffer} buffer The ArrayBuffer to convert.\n * @return {string} The Base64 encoded string.\n */\nconst arrayBufferToBase64 = (buffer) => {\n    let base64String = '';\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < bytes.byteLength; i++) {\n        base64String += String.fromCharCode(bytes[i]);\n    }\n    return window.btoa(base64String);\n};\n\n/**\n * Converts a URL safe Base64 encoded string to a JS ArrayBuffer.\n *\n * @param {string} base64String The URL safe Base64 encoded string.\n * @returns {Uint8Array} outputArray The ArrayBuffer.\n */\nconst urlBase64ToUint8Array = (base64String) => {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n        .replace(/-/g, '+')\n        .replace(/_/g, '/');\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    for (let i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n};\n\n/**\n * Set up the service worker.\n *\n * @returns {Promise<ServiceWorkerRegistration>} The service worker registration.\n */\nconst setupWorker = async() => {\n    let registration;\n\n    try {\n        // Register the service worker.\n        // As the service worker listens for push notifications,\n        // the user will be prompted to allow push notifications.\n        // We set the scope for the entire app, so we can receive notifications wherever we are.\n        const workerUri = '/message/output/popup/amd/build/notification_service_worker.min.js';\n        registration = await navigator.serviceWorker.register(workerUri, {scope: '/'});\n\n        // Next add a listener for messages from the service worker.\n        // We do this now, so if push notification setup fails, the service worker can fall back to polling.\n        navigator.serviceWorker.addEventListener('message', event => {\n            window.console.log('Received message from service worker:', event.data.message);\n            // Now we can use the message data to manipulate the DOM or perform other actions.\n        });\n\n    } catch (error) {\n        if (error.name === 'NotAllowedError') {\n            // Handle the specific case where permission was denied.\n            window.console.error('Permission for Push API has been denied');\n            // TODO: Show a message to the user to explain why they need to enable Push.\n            // Maybe save this as a preference so we don't show it again?\n        } else {\n            // We have a non permission error, re-throw.\n            throw error;\n        }\n    }\n    return registration;\n};\n\n/**\n * Set up a push subscription.\n *\n * @param {string} vapidpublickey The public key to use for push notifications.\n * @returns {Promise<void>} A promise that resolves when the subscription is set up.\n */\nconst setupSubscription = async(vapidpublickey) => {\n    // Set up the service worker.\n    const workerRegistration = await setupWorker();\n\n    // Attempt to retrieve existing push subscription.\n    let subscription = await workerRegistration.pushManager.getSubscription();\n\n    // If no existing subscription, subscribe.\n    if (!subscription) {\n        const convertedVapidKey = urlBase64ToUint8Array(vapidpublickey);\n        const options = {\n            userVisibleOnly: true, //\n            applicationServerKey: convertedVapidKey\n        };\n\n        // Get the push subscription object.\n        subscription = await workerRegistration.pushManager.subscribe(options);\n\n        // Register the subscription with the server.\n        await registerPushSubscription(subscription).catch((error) => {\n            // If the registration fails, unsubscribe.\n            subscription.unsubscribe();\n            throw error;\n        });\n    }\n};\n\n/**\n * Register a push subscription with the server.\n *\n * @param {PushSubscription} subscription The push subscription object.\n * @returns {Promise<*>} The response from the server.\n */\nconst registerPushSubscription = async(subscription) => {\n    const request = {\n        methodname: 'message_popup_register_push_subscription',\n        args: {\n            endpoint: subscription.endpoint,\n            expirationtime: subscription.expirationTime,\n            auth: arrayBufferToBase64(subscription.getKey('auth')),\n            p256dh: arrayBufferToBase64(subscription.getKey('p256dh')),\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Handle the push modal close event.\n * @param {string} vapidpublickey The public key to use for push notifications.\n * @returns {Promise<void>} A promise that resolves when the modal is closed.\n */\nconst pushModalClose = async(vapidpublickey) => {\n    // Request permission for notifications.\n    const permission = await window.Notification.requestPermission();\n    if (permission !== 'granted') {\n        window.console.error('Notification permission denied.');\n        return;\n    } else {\n        await setupSubscription(vapidpublickey);\n    }\n};\n\n/**\n * Initialise the push notification service.\n *\n * @param {string} vapidpublickey The public key to use for push notifications.\n */\nexport const init = async(vapidpublickey) => {\n    // Check if the user has already granted permission.\n    if (window.Notification.permission === 'denied') {\n        // TODO: Keep a record of this and periodically check if the user has changed their mind.\n        // For now, just log an error.\n        window.console.error('Notification permission denied.');\n        return;\n    } else if (window.Notification.permission === 'granted') {\n        // If the user has already granted permission, we can skip the prompt,\n        // and just continue with initialisation.\n        window.console.log('Notification permission granted.');\n        await setupSubscription(vapidpublickey);\n    } else {\n        // Otherwise, we need to ask the user for permission.\n        // And due to browser security, we need to do this in response to a user action.\n        window.console.log('Notification permission not granted. Requesting permission...');\n        // Get the strings that will be used in the modal.\n        const modalStrings = await getStrings([\n            {key: 'pushmodaltitle', component: 'message_popup'},\n            {key: 'pushmodalbody', component: 'message_popup'},\n            {key: 'ok', component: 'core'},\n        ]);\n\n        // Set up the modal.\n        const modal = await ModalCancel.create({\n            title: modalStrings[0],\n            body: modalStrings[1],\n            show: true,\n            removeOnClose: true,\n        });\n        // Override default button text.\n        modal.setButtonText('cancel', 'OK');\n        // Set up the modal event listeners.\n        modal.getRoot().on(ModalEvents.cancel, async() => {\n            pushModalClose(vapidpublickey);\n        });\n        modal.getRoot().on(ModalEvents.hidden, async() => {\n            pushModalClose(vapidpublickey);\n        });\n    }\n};\n"],"names":["arrayBufferToBase64","buffer","base64String","bytes","Uint8Array","i","byteLength","String","fromCharCode","window","btoa","setupSubscription","async","workerRegistration","registration","workerUri","navigator","serviceWorker","register","scope","addEventListener","event","console","log","data","message","error","name","setupWorker","subscription","pushManager","getSubscription","options","userVisibleOnly","applicationServerKey","base64","repeat","length","replace","rawData","atob","outputArray","charCodeAt","urlBase64ToUint8Array","vapidpublickey","subscribe","registerPushSubscription","catch","unsubscribe","request","methodname","args","endpoint","expirationtime","expirationTime","auth","getKey","p256dh","Ajax","call","pushModalClose","Notification","requestPermission","permission","modalStrings","key","component","modal","ModalCancel","create","title","body","show","removeOnClose","setButtonText","getRoot","on","ModalEvents","cancel","hidden"],"mappings":"weA2BMA,oBAAuBC,aACrBC,aAAe,SACbC,MAAQ,IAAIC,WAAWH,YACxB,IAAII,EAAI,EAAGA,EAAIF,MAAMG,WAAYD,IAClCH,cAAgBK,OAAOC,aAAaL,MAAME,WAEvCI,OAAOC,KAAKR,eAiEjBS,kBAAoBC,MAAAA,uBAEhBC,wBAxCUD,eACZE,uBAOMC,UAAY,qEAClBD,mBAAqBE,UAAUC,cAAcC,SAASH,UAAW,CAACI,MAAO,MAIzEH,UAAUC,cAAcG,iBAAiB,WAAWC,QAChDZ,OAAOa,QAAQC,IAAI,wCAAyCF,MAAMG,KAAKC,YAI7E,MAAOC,UACc,oBAAfA,MAAMC,WAOAD,MALNjB,OAAOa,QAAQI,MAAM,kDAQtBZ,cAW0Bc,OAG7BC,mBAAqBhB,mBAAmBiB,YAAYC,sBAGnDF,aAAc,OAETG,QAAU,CACZC,iBAAiB,EACjBC,qBApEmBhC,CAAAA,qBAErBiC,QAAUjC,aADA,IAAIkC,QAAQ,EAAIlC,aAAamC,OAAS,GAAK,IAEtDC,QAAQ,KAAM,KACdA,QAAQ,KAAM,KACbC,QAAU9B,OAAO+B,KAAKL,QACtBM,YAAc,IAAIrC,WAAWmC,QAAQF,YACtC,IAAIhC,EAAI,EAAGA,EAAIkC,QAAQF,SAAUhC,EAClCoC,YAAYpC,GAAKkC,QAAQG,WAAWrC,UAEjCoC,aAuDuBE,CAAsBC,iBAOhDf,mBAAqBhB,mBAAmBiB,YAAYe,UAAUb,eAGxDc,yBAAyBjB,cAAckB,OAAOrB,cAEhDG,aAAamB,cACPtB,WAWZoB,yBAA2BlC,MAAAA,qBACvBqC,QAAU,CACZC,WAAY,2CACZC,KAAM,CACFC,SAAUvB,aAAauB,SACvBC,eAAgBxB,aAAayB,eAC7BC,KAAMvD,oBAAoB6B,aAAa2B,OAAO,SAC9CC,OAAQzD,oBAAoB6B,aAAa2B,OAAO,oBAIjDE,cAAKC,KAAK,CAACV,UAAU,IAQ1BW,eAAiBhD,MAAAA,iBAGA,kBADMH,OAAOoD,aAAaC,0BAKnCnD,kBAAkBiC,gBAHxBnC,OAAOa,QAAQI,MAAM,kDAYTd,MAAAA,oBAEuB,WAAnCH,OAAOoD,aAAaE,WAKjB,GAAuC,YAAnCtD,OAAOoD,aAAaE,WAG3BtD,OAAOa,QAAQC,IAAI,0CACbZ,kBAAkBiC,oBACrB,CAGHnC,OAAOa,QAAQC,IAAI,uEAEbyC,mBAAqB,mBAAW,CAClC,CAACC,IAAK,iBAAkBC,UAAW,iBACnC,CAACD,IAAK,gBAAiBC,UAAW,iBAClC,CAACD,IAAK,KAAMC,UAAW,UAIrBC,YAAcC,sBAAYC,OAAO,CACnCC,MAAON,aAAa,GACpBO,KAAMP,aAAa,GACnBQ,MAAM,EACNC,eAAe,IAGnBN,MAAMO,cAAc,SAAU,MAE9BP,MAAMQ,UAAUC,GAAGC,sBAAYC,QAAQlE,UACnCgD,eAAehB,mBAEnBuB,MAAMQ,UAAUC,GAAGC,sBAAYE,QAAQnE,UACnCgD,eAAehB,wBAhCnBnC,OAAOa,QAAQI,MAAM"}