{"version":3,"file":"notification_popover_push.min.js","sources":["../src/notification_popover_push.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport Ajax from 'core/ajax';\n\n/**\n * Converts a JS ArrayBuffer to a Base64 encoded string.\n *\n * @param {ArrayBuffer} buffer The ArrayBuffer to convert.\n * @return {string} The Base64 encoded string.\n */\nconst arrayBufferToBase64 = (buffer) => {\n    window.console.log(buffer);\n    let binary = '';\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    return window.btoa(binary);\n};\n\nconst setupWorker = async() => {\n    let registration;\n\n    try {\n        // Register the service worker.\n        // As the service worker listens for push notifications,\n        // the user will be prompted to allow push notifications.\n        const workeruri = '/message/output/popup/amd/build/notification_service_worker.min.js';\n        registration = await navigator.serviceWorker.register(workeruri);\n    } catch (error) {\n        if (error.name === 'NotAllowedError') {\n            // Handle the specific case where permission was denied.\n            window.console.error('Permission for Push API has been denied');\n            // TODO: Show a message to the user to explain why they need to enable Push.\n            // Maybe save this as a preference so we don't show it again?\n        } else {\n            // We have a non permission error, re-throw.\n            throw error;\n        }\n    }\n    return registration;\n};\n\nconst registerPushSubscription = async(subscription) => {\n    const request = {\n        methodname: 'message_popup_register_push_subscription',\n        args: {\n            endpoint: subscription.endpoint,\n            expirationtime: subscription.expirationTime,\n            auth: arrayBufferToBase64(subscription.getKey('auth')),\n            p256dh: arrayBufferToBase64(subscription.getKey('p256dh')),\n        }\n    };\n\n    return Ajax.call([request])[0];\n};\n\nconst urlBase64ToUint8Array = (base64String) => {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n        .replace(/-/g, '+')\n        .replace(/_/g, '/');\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    for (let i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n};\n\n/**\n * Initialise the push notification service.\n *\n * @param {string} vapidpublickey The public key to use for push notifications.\n */\nexport const init = async(vapidpublickey) => {\n    // Set up the service worker.\n    const workerRegistration = await setupWorker();\n\n    // Attempt to retrieve existing push subscription.\n    let subscription = await workerRegistration.pushManager.getSubscription();\n\n    // If no existing subscription, subscribe.\n    if (!subscription) {\n        const convertedVapidKey = urlBase64ToUint8Array(vapidpublickey);\n        const options = {\n            userVisibleOnly: true, //\n            applicationServerKey: convertedVapidKey\n        };\n\n        // Get the push subscription object.\n        subscription = await workerRegistration.pushManager.subscribe(options);\n\n        // Register the subscription with the server.\n        await registerPushSubscription(subscription).catch((error) => {\n            // If the registration fails, unsubscribe.\n            subscription.unsubscribe();\n            throw error;\n        });\n    }\n};\n"],"names":["arrayBufferToBase64","buffer","window","console","log","binary","bytes","Uint8Array","i","byteLength","String","fromCharCode","btoa","async","workerRegistration","registration","workeruri","navigator","serviceWorker","register","error","name","setupWorker","subscription","pushManager","getSubscription","options","userVisibleOnly","applicationServerKey","base64String","base64","repeat","length","replace","rawData","atob","outputArray","charCodeAt","urlBase64ToUint8Array","vapidpublickey","subscribe","request","methodname","args","endpoint","expirationtime","expirationTime","auth","getKey","p256dh","Ajax","call","registerPushSubscription","catch","unsubscribe"],"mappings":"kPAuBMA,oBAAuBC,SACzBC,OAAOC,QAAQC,IAAIH,YACfI,OAAS,SACPC,MAAQ,IAAIC,WAAWN,YACxB,IAAIO,EAAI,EAAGA,EAAIF,MAAMG,WAAYD,IAClCH,QAAUK,OAAOC,aAAaL,MAAME,WAEjCN,OAAOU,KAAKP,uBA0DHQ,MAAAA,uBAEVC,wBAzDUD,eACZE,uBAMMC,UAAY,qEAClBD,mBAAqBE,UAAUC,cAAcC,SAASH,WACxD,MAAOI,UACc,oBAAfA,MAAMC,WAOAD,MALNlB,OAAOC,QAAQiB,MAAM,kDAQtBL,cAqC0BO,OAG7BC,mBAAqBT,mBAAmBU,YAAYC,sBAGnDF,aAAc,OAETG,QAAU,CACZC,iBAAiB,EACjBC,qBA9BmBC,CAAAA,qBAErBC,QAAUD,aADA,IAAIE,QAAQ,EAAIF,aAAaG,OAAS,GAAK,IAEtDC,QAAQ,KAAM,KACdA,QAAQ,KAAM,KACbC,QAAUhC,OAAOiC,KAAKL,QACtBM,YAAc,IAAI7B,WAAW2B,QAAQF,YACtC,IAAIxB,EAAI,EAAGA,EAAI0B,QAAQF,SAAUxB,EAClC4B,YAAY5B,GAAK0B,QAAQG,WAAW7B,UAEjC4B,aAiBuBE,CAAsBC,iBAOhDhB,mBAAqBT,mBAAmBU,YAAYgB,UAAUd,cAhDrCb,OAAAA,qBACvB4B,QAAU,CACZC,WAAY,2CACZC,KAAM,CACFC,SAAUrB,aAAaqB,SACvBC,eAAgBtB,aAAauB,eAC7BC,KAAM/C,oBAAoBuB,aAAayB,OAAO,SAC9CC,OAAQjD,oBAAoBuB,aAAayB,OAAO,oBAIjDE,cAAKC,KAAK,CAACV,UAAU,IAwClBW,CAAyB7B,cAAc8B,OAAOjC,cAEhDG,aAAa+B,cACPlC"}