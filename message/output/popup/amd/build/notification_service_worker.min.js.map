{"version":3,"file":"notification_service_worker.min.js","sources":["../src/notification_service_worker.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint-env serviceworker */\n\n/**\n * Send a push notification to the users browser.\n *\n * @param {Event} event The push event.\n * @param {object} data The data object.\n */\nconst sendPush = (event, data) => {\n    const options = {\n        body: data.body,\n        icon: '/Moodle_Circle_M.jpg',\n        image: '/Moodle_Circle_M.jpg',\n        badge: '/Moodle_Circle_M.jpg',\n        vibrate: [200, 100, 200],\n        lang: 'en-AU',\n        //tag: 'user-notification',\n        //data: {primaryKey: 1},\n        requireInteraction: true,\n        //direction: 'auto',\n        //silent: false,\n        timestamp: Date.now(),\n        actions: [  // Actions do not work on Mac OS.\n            //{action: 'like', title: 'Like', icon: '/img/like.png'},\n            //{action: 'reply', title: 'Reply', icon: '/img/reply.png'}\n            {action: 'view', title: 'Viewzzz'}\n        ]\n    };\n\n    event.waitUntil(\n        self.registration.showNotification(data.title, options)\n    );\n};\n\n/**\n * Send a message to any page connected to this worker.\n * The page decides what to do with the message.\n *\n * @param {object} data The data object.\n */\nconst sendMessage = (data) => {\n    self.console.log('Sending message to clients', data);\n    const channel = new BroadcastChannel('my-channel');\n        // Convert the data to a json string, required for broadcasting.\n        const json = JSON.stringify(data);\n        channel.postMessage(json);\n\n};\n\n// Set up the event listener that will receive push events from the server.\nself.addEventListener('push', (event) => {\n    const data = event.data.json(); // Assume the payload is JSON.\n    self.console.log('Payload:', event.data.text());\n\n    // Filter what we do with the event payload based on its type field.\n    if (data.push === true) {\n        // Push notifications are handled exclusively by the service worker.\n        sendPush(event, data);\n    }\n    // Everything else to do with the message is handled by the parent pages.\n    sendMessage(data);\n});\n\nself.addEventListener('notificationclick', function(event) {\n    self.console.log('Notification click: tag ', event.notification.tag);\n    event.notification.close(); // Close the notification when clicked\n\n    // Perform some action in response to the notification click\n    event.waitUntil(\n        // Assuming you want to open a URL in a new tab/window\n        clients.matchAll({\n            type: 'window'\n        }).then(function(windowClients) {\n            // Check if there is already a window/tab open with the target URL\n            for (var i = 0; i < windowClients.length; i++) {\n                var client = windowClients[i];\n                // If so, just focus it.\n                if (client.url === '/' && 'focus' in client) {\n                    return client.focus();\n                }\n            }\n            // If not, then open the new URL\n            if (clients.openWindow) {\n                return clients.openWindow('/');\n            }\n        })\n    );\n});\n\n"],"names":["self","addEventListener","event","data","json","console","log","text","push","options","body","icon","image","badge","vibrate","lang","requireInteraction","timestamp","Date","now","actions","action","title","waitUntil","registration","showNotification","sendPush","channel","BroadcastChannel","JSON","stringify","postMessage","sendMessage","notification","tag","close","clients","matchAll","type","then","windowClients","i","length","client","url","focus","openWindow"],"mappings":"AAiEAA,KAAKC,iBAAiB,QAASC,cACrBC,KAAOD,MAAMC,KAAKC,OACxBJ,KAAKK,QAAQC,IAAI,WAAYJ,MAAMC,KAAKI,SAGtB,IAAdJ,KAAKK,MA/CI,EAACN,MAAOC,cACfM,QAAU,CACZC,KAAMP,KAAKO,KACXC,KAAM,uBACNC,MAAO,uBACPC,MAAO,uBACPC,QAAS,CAAC,IAAK,IAAK,KACpBC,KAAM,QAGNC,oBAAoB,EAGpBC,UAAWC,KAAKC,MAChBC,QAAS,CAGL,CAACC,OAAQ,OAAQC,MAAO,aAIhCpB,MAAMqB,UACFvB,KAAKwB,aAAaC,iBAAiBtB,KAAKmB,MAAOb,WA2B/CiB,CAASxB,MAAOC,MAjBHA,CAAAA,OACjBH,KAAKK,QAAQC,IAAI,6BAA8BH,YACzCwB,QAAU,IAAIC,iBAAiB,cAE3BxB,KAAOyB,KAAKC,UAAU3B,MAC5BwB,QAAQI,YAAY3B,OAexB4B,CAAY7B,SAGhBH,KAAKC,iBAAiB,qBAAqB,SAASC,OAChDF,KAAKK,QAAQC,IAAI,2BAA4BJ,MAAM+B,aAAaC,KAChEhC,MAAM+B,aAAaE,QAGnBjC,MAAMqB,UAEFa,QAAQC,SAAS,CACbC,KAAM,WACPC,MAAK,SAASC,mBAER,IAAIC,EAAI,EAAGA,EAAID,cAAcE,OAAQD,IAAK,KACvCE,OAASH,cAAcC,MAER,MAAfE,OAAOC,KAAe,UAAWD,cAC1BA,OAAOE,WAIlBT,QAAQU,kBACDV,QAAQU,WAAW"}