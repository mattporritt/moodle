{"version":3,"file":"notification_service_worker.min.js","sources":["../src/notification_service_worker.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Send a push notification to the users browser.\n *\n * @param {Event} event The push event.\n * @param {object} data The data object.\n */\nconst sendPush = (event, data) => {\n    const title = data.title || 'Default Title';\n    const body = data.body || 'Default Body';\n\n    const options = {\n        body: body\n    };\n\n    event.waitUntil(\n        self.registration.showNotification(title, options)\n    );\n};\n\nconst sendBroadcast = () => {\n    // Get a list of all the client pages controlled by this service worker\n    const clients = self.clients.matchAll();\n    clients.forEach(client => {\n        client.postMessage({\n            message: 'Hello from the service worker!'\n        });\n    });\n};\n\n// Set up the event listener that will receive push events from the server.\nself.addEventListener('push', (event) => {\n\n    let data = {}; // Default data object.\n    if (event.data) {\n        data = event.data.json(); // Assume the payload is JSON.\n        self.console.log('Payload:', event.data.text());\n    } else {\n        self.console.log('No payload');\n    }\n\n    // Filter what we do with the event payload based on its type field.\n    switch (data.type) {\n        case 'notification':\n            // Regular notification.\n            // Display a push notification to the user.\n            sendPush(event, data);\n            // Update the notification count in the popover.\n            // TODO: Update the notification count in the popover.\n            break;\n        case 'broadcast':\n            // High priority notification.\n            // Display a push notification to the user.\n            // Update the notification count in the popover.\n            // Show a notification modal to the user.\n            sendBroadcast();\n            break;\n        default:\n            self.console.error('Payload does not contain a type field.');\n            break;\n    }\n});\n"],"names":["self","addEventListener","event","data","json","console","log","text","type","title","options","body","waitUntil","registration","showNotification","sendPush","clients","matchAll","forEach","client","postMessage","message","error"],"mappings":"AA6CAA,KAAKC,iBAAiB,QAASC,YAEvBC,KAAO,UACPD,MAAMC,MACNA,KAAOD,MAAMC,KAAKC,OAClBJ,KAAKK,QAAQC,IAAI,WAAYJ,MAAMC,KAAKI,SAExCP,KAAKK,QAAQC,IAAI,cAIbH,KAAKK,UACJ,eApCI,EAACN,MAAOC,cACfM,MAAQN,KAAKM,OAAS,gBAGtBC,QAAU,CACZC,KAHSR,KAAKQ,MAAQ,gBAM1BT,MAAMU,UACFZ,KAAKa,aAAaC,iBAAiBL,MAAOC,WA8BtCK,CAASb,MAAOC,gBAIf,YA5BOH,KAAKgB,QAAQC,WACrBC,SAAQC,SACZA,OAAOC,YAAY,CACfC,QAAS,oDAiCTrB,KAAKK,QAAQiB,MAAM"}