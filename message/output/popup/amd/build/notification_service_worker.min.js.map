{"version":3,"file":"notification_service_worker.min.js","sources":["../src/notification_service_worker.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Send a push notification to the users browser.\n *\n * @param {Event} event The push event.\n * @param {object} data The data object.\n */\nconst sendPush = (event, data) => {\n    const title = data.title || 'Default Title';\n    const body = data.body || 'Default Body';\n\n    const options = {\n        body: body\n    };\n\n    event.waitUntil(\n        self.registration.showNotification(title, options)\n    );\n};\n\n/**\n * Send a message to any page connected to this worker.\n * The page decides what to do with the message.\n *\n * @param {object} data The data object.\n */\nconst sendMessage = (data) => {\n    self.console.log('Sending message to clients', data);\n    const channel = new BroadcastChannel('my-channel');\n        // Convert the data to a json string, required for broadcasting.\n        const json = JSON.stringify(data);\n        channel.postMessage(json);\n\n};\n\n// Set up the event listener that will receive push events from the server.\nself.addEventListener('push', (event) => {\n    const data = event.data.json(); // Assume the payload is JSON.\n    self.console.log('Payload:', event.data.text());\n\n    // Filter what we do with the event payload based on its type field.\n    if (data.push === true) {\n        // Push notifications are handled exclusively by the service worker.\n        sendPush(event, data);\n    }\n    // Everything else to do with the message is handled by the parent pages.\n    sendMessage(data);\n});\n"],"names":["self","addEventListener","event","data","json","console","log","text","push","title","options","body","waitUntil","registration","showNotification","sendPush","channel","BroadcastChannel","JSON","stringify","postMessage","sendMessage"],"mappings":"AAkDAA,KAAKC,iBAAiB,QAASC,cACrBC,KAAOD,MAAMC,KAAKC,OACxBJ,KAAKK,QAAQC,IAAI,WAAYJ,MAAMC,KAAKI,SAGtB,IAAdJ,KAAKK,MAlCI,EAACN,MAAOC,cACfM,MAAQN,KAAKM,OAAS,gBAGtBC,QAAU,CACZC,KAHSR,KAAKQ,MAAQ,gBAM1BT,MAAMU,UACFZ,KAAKa,aAAaC,iBAAiBL,MAAOC,WA2B1CK,CAASb,MAAOC,MAjBHA,CAAAA,OACjBH,KAAKK,QAAQC,IAAI,6BAA8BH,YACzCa,QAAU,IAAIC,iBAAiB,cAE3Bb,KAAOc,KAAKC,UAAUhB,MAC5Ba,QAAQI,YAAYhB,OAexBiB,CAAYlB"}