define("message_popup/notification_popover_push",["exports","core/ajax","core/modal_cancel","core/modal_events"],(function(_exports,_ajax,_modal_cancel,_modal_events){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_ajax=_interopRequireDefault(_ajax),_modal_cancel=_interopRequireDefault(_modal_cancel),_modal_events=_interopRequireDefault(_modal_events);const arrayBufferToBase64=buffer=>{window.console.log(buffer);let base64String="";const bytes=new Uint8Array(buffer);for(let i=0;i<bytes.byteLength;i++)base64String+=String.fromCharCode(bytes[i]);return window.btoa(base64String)},setupSubscription=async vapidpublickey=>{const workerRegistration=await(async()=>{let registration;try{const workerUri="/message/output/popup/amd/build/notification_service_worker.min.js";registration=await navigator.serviceWorker.register(workerUri)}catch(error){if("NotAllowedError"!==error.name)throw error;window.console.error("Permission for Push API has been denied")}return registration})();let subscription=await workerRegistration.pushManager.getSubscription();if(!subscription){const options={userVisibleOnly:!0,applicationServerKey:(base64String=>{const base64=(base64String+"=".repeat((4-base64String.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/"),rawData=window.atob(base64),outputArray=new Uint8Array(rawData.length);for(let i=0;i<rawData.length;++i)outputArray[i]=rawData.charCodeAt(i);return outputArray})(vapidpublickey)};subscription=await workerRegistration.pushManager.subscribe(options),await registerPushSubscription(subscription).catch((error=>{throw subscription.unsubscribe(),error}))}},registerPushSubscription=async subscription=>{const request={methodname:"message_popup_register_push_subscription",args:{endpoint:subscription.endpoint,expirationtime:subscription.expirationTime,auth:arrayBufferToBase64(subscription.getKey("auth")),p256dh:arrayBufferToBase64(subscription.getKey("p256dh"))}};return _ajax.default.call([request])[0]};_exports.init=async vapidpublickey=>{if("denied"!==window.Notification.permission)if("granted"===window.Notification.permission)window.console.log("Notification permission granted."),await setupSubscription(vapidpublickey);else{const modal=await _modal_cancel.default.create({title:"Test title",body:"<p>Example body content</p>",show:!0,removeOnClose:!0});modal.setButtonText("cancel","OK"),modal.getRoot().on(_modal_events.default.cancel,(async e=>{window.console.log(e);"granted"===await window.Notification.requestPermission()?await setupSubscription(vapidpublickey):window.console.error("Notification permission denied.")})),window.console.log("Notification permission not granted. Requesting permission...")}else window.console.error("Notification permission denied.")}}));

//# sourceMappingURL=notification_popover_push.min.js.map