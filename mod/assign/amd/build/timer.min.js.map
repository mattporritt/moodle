{"version":3,"sources":["../src/timer.js"],"names":["endtime","timeoutid","timeremaining","secs","hours","Math","floor","minutes","map","v","filter","i","join","stop","clearTimeout","update","now","Date","getTime","secondsleft","assignTimer","document","getElementById","assignTimerLeft","classList","add","remove","innerHTML","setTimeout","init","timerstartvalue","M","pageloadstarttime","style","display"],"mappings":"kIA2BIA,CAAAA,CAAO,CAAG,C,CAGVC,CAAS,CAAG,I,CASVC,CAAa,CAAG,SAACC,CAAD,CAAU,IACtBC,CAAAA,CAAK,CAAGC,IAAI,CAACC,KAAL,CAAWH,CAAI,CAAG,IAAlB,CADc,CAEtBI,CAAO,CAAGF,IAAI,CAACC,KAAL,CAAWH,CAAI,CAAG,EAAlB,EAAwB,EAFZ,CAK5B,MAAO,CAACC,CAAD,CAAQG,CAAR,CAFSJ,CAAI,CAAG,EAEhB,EACFK,GADE,CACE,SAAAC,CAAC,QAAQ,GAAJ,CAAAA,CAAC,CAAQ,IAAMA,CAAd,CAAkBA,CAAvB,CADH,EAEFC,MAFE,CAEK,SAACD,CAAD,CAAIE,CAAJ,QAAgB,IAAN,GAAAF,CAAC,EAAiB,CAAJ,CAAAE,CAAxB,CAFL,EAGFC,IAHE,CAGG,GAHH,CAIV,C,CAOKC,CAAI,CAAG,UAAM,CACf,GAAIZ,CAAJ,CAAe,CACXa,YAAY,CAACb,CAAD,CACf,CACJ,C,CAOKc,CAAM,CAAG,UAAM,IACXC,CAAAA,CAAG,CAAG,GAAIC,CAAAA,IAAJ,GAAWC,OAAX,EADK,CAEXC,CAAW,CAAGd,IAAI,CAACC,KAAL,CAAW,CAACN,CAAO,CAAGgB,CAAX,EAAkB,GAA7B,CAFH,CAGbI,CAAW,CAAGC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAHD,CAIbC,CAAe,CAAGF,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,CAJL,CAOjB,GAAkB,CAAd,CAAAH,CAAJ,CAAqB,CACjBC,CAAW,CAACI,SAAZ,CAAsBC,GAAtB,CAA0B,OAA1B,EACAL,CAAW,CAACI,SAAZ,CAAsBC,GAAtB,CAA0B,cAA1B,EACAZ,CAAI,GACJ,MACH,CALD,IAKO,IAAkB,GAAd,CAAAM,CAAJ,CAAuB,CAC1BC,CAAW,CAACI,SAAZ,CAAsBE,MAAtB,CAA6B,eAA7B,EACAN,CAAW,CAACI,SAAZ,CAAsBC,GAAtB,CAA0B,OAA1B,EACAL,CAAW,CAACI,SAAZ,CAAsBC,GAAtB,CAA0B,cAA1B,CACH,CAJM,IAIA,IAAkB,GAAd,CAAAN,CAAJ,CAAuB,CAC1BC,CAAW,CAACI,SAAZ,CAAsBE,MAAtB,CAA6B,cAA7B,EACAN,CAAW,CAACI,SAAZ,CAAsBC,GAAtB,CAA0B,OAA1B,EACAL,CAAW,CAACI,SAAZ,CAAsBC,GAAtB,CAA0B,eAA1B,CACH,CAGDF,CAAe,CAACI,SAAhB,CAA4BzB,CAAa,CAACiB,CAAD,CAAzC,CAGAlB,CAAS,CAAG2B,UAAU,CAACb,CAAD,CAAS,GAAT,CACzB,C,QAQmB,QAAPc,CAAAA,IAAO,CAACC,CAAD,CAAqB,CACrC,GAAIV,CAAAA,CAAW,CAAGC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAlB,CACAtB,CAAO,CAAG+B,CAAC,CAACC,iBAAF,CAAoBd,OAApB,GAAmD,GAAlB,CAAAY,CAA3C,CACAf,CAAM,GACNK,CAAW,CAACa,KAAZ,CAAkBC,OAAlB,CAA6B,OAChC,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module for the time in the assign module.\n *\n * @copyright  2020 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * Module level variables.\n */\n\n// Timestamp at which time runs out.\nvar endtime = 0;\n\n// This records the id of the timeout that updates the clock periodically.\nvar timeoutid = null;\n\n/**\n * Helper method to convert time remaining in seconds into HH:MM:SS format.\n *\n * @method init\n * @param {Integer} secs Time remaining in seconds to get value for.\n * @return {String} Time remaining in HH:MM:SS format.\n */\nconst timeremaining = (secs) => {\n    const hours = Math.floor(secs / 3600);\n    const minutes = Math.floor(secs / 60) % 60;\n    const seconds = secs % 60;\n\n    return [hours, minutes, seconds]\n        .map(v => v < 10 ? \"0\" + v : v)\n        .filter((v, i) => v !== \"00\" || i > 0)\n        .join(\":\");\n};\n\n/**\n * Stop the timer, if it is running.\n *\n * @method stop\n */\nconst stop = () => {\n    if (timeoutid) {\n        clearTimeout(timeoutid);\n    }\n};\n\n/**\n * Function to update the clock with the current time left.\n *\n * @method update\n */\nconst update = () => {\n    const now = new Date().getTime();\n    const secondsleft = Math.floor((endtime - now) / 1000);\n    let assignTimer = document.getElementById('assign-timer');\n    let assignTimerLeft = document.getElementById('assign-time-left');\n\n    // If time has expired, set the hidden form field that says time has expired.\n    if (secondsleft < 0) {\n        assignTimer.classList.add('alert');\n        assignTimer.classList.add('alert-danger');\n        stop();\n        return;\n    } else if (secondsleft < 300) { // Add danger style when less than 5 minutes left.\n        assignTimer.classList.remove('alert-warning');\n        assignTimer.classList.add('alert');\n        assignTimer.classList.add('alert-danger');\n    } else if (secondsleft < 900) { // Add warning style when less than 15 minutes left.\n        assignTimer.classList.remove('alert-danger');\n        assignTimer.classList.add('alert');\n        assignTimer.classList.add('alert-warning');\n    }\n\n    // Update the time display.\n    assignTimerLeft.innerHTML = timeremaining(secondsleft);\n\n    // Arrange for this method to be called again soon.\n    timeoutid = setTimeout(update, 500);\n};\n\n/**\n * Set up the submission timer.\n *\n * @method init\n * @param {Integer} timerstartvalue Submissition time remaining, in seconds.\n */\nexport const init = (timerstartvalue) => {\n    let assignTimer = document.getElementById('assign-timer');\n    endtime = M.pageloadstarttime.getTime() + (timerstartvalue * 1000);\n    update();\n    assignTimer.style.display = ('block');\n};\n"],"file":"timer.min.js"}